#!/usr/bin/env python3
import sys


def listaParaString(listaDeSequencias): 
    sequencia = "" 
    for i in listaDeSequencias: 
        sequencia += i  
    return sequencia


def obterNomeMaiorTamanho(dicionarioNomeSequencia):
    listaDeChaves = dicionarioNomeSequencia.keys()
    maiorTamanho = max(map(len,listaDeChaves))
    return maiorTamanho


def obterFicheiroFasta(argumento):
    listaDeLinhas = []
    argumento = sys.argv[1] 
    with open(argumento, 'r') as fasta:
        for linha in fasta:
            listaDeLinhas.append(linha)
    return listaDeLinhas


def obterDicionarioNomeSequenciaNtax(listaDeLinhas,dicionarioNomeSequencia):
    dicionarioNomeSequencia = {}
    for linha in listaDeLinhas:
        linha = linha.strip("\n") 
        if linha.startswith(">"):
            nome = linha[1:]
            if nome not in dicionarioNomeSequencia:
                dicionarioNomeSequencia[nome] = []
            continue    
        sequencia = linha
        if len(sequencia) > 99:
            sequencia = "A sequência têm mais de 99 caracteres!"
            break
        dicionarioNomeSequencia[nome].append(sequencia)
    return dicionarioNomeSequencia


def escreverNexusAlinhado(dicionarioNomeSequencia):
    dicionarioNomeSequenciaAlinhado = {nome.rjust(obterNomeMaiorTamanho(dicionarioNomeSequencia)+1) : sequencia for nome, sequencia in dicionarioNomeSequencia.items()}
    for nome, sequencia in dicionarioNomeSequenciaAlinhado.items():
            print(nome,listaParaString(sequencia))    


def formatarNexusMrBayes(dicionarioNomeSequencia):
    ntax = len(dicionarioNomeSequencia.keys())
    nchar = sum(len(i) for i in list(dicionarioNomeSequencia.items())[0][1])
    print("""#NEXUS

BEGIN DATA;
DIMENSIONS NTAX={} NCHAR={};
FORMAT DATATYPE=DNA MISSING=N GAP=-;
MATRIX""".format(ntax, nchar))
    escreverNexusAlinhado(dicionarioNomeSequencia)
    print("""  ;
END;""")
    print("""
begin mrbayes;
    set autoclose=yes;
    outgroup={};
    mcmcp ngen={} printfreq=1000 samplefreq=100 diagnfreq=1000 nchains=4 savebrlens=yes filename=ChangeMyNameMrBayes;
    mcmc;
    sumt filename=ChangeMyNameMrBayes;
end;""".format(sys.argv[2],sys.argv[3]))


if __name__ == '__main__':
    argumento = ""
    dicionarioNomeSequencia = ""
    listaDeLinhas = obterFicheiroFasta(argumento)
    dicionarioNomeSequencia = obterDicionarioNomeSequenciaNtax(listaDeLinhas,dicionarioNomeSequencia)
    formatarNexusMrBayes(dicionarioNomeSequencia)